{
  "openapi": "3.0.0",
  "info": {
    "contact": {
      "url": "http://developer.ticketmaster.com/support/contact-us/"
    },
    "description": "The Ticketmaster Discovery API allows you to search for events, attractions, or venues.",
    "title": "Discovery API",
    "version": "v2",
    "x-jentic-source-url": "https://raw.githubusercontent.com/ticketmaster-api/ticketmaster-api.github.io/dev/_data/orgs/discovery-api/v2/api.json"
  },
  "servers": [
    {
      "url": "https://app.ticketmaster.com/discovery/v2"
    }
  ],
  "paths": {
    "/discovery/v2/attractions": {
      "get": {
        "parameters": [
          {
            "description": "Sorting order of the search result. Allowable Values : 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc'",
            "example": "",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "relevance,desc",
              "pattern": "^(name|relevance),(asc|desc)$",
              "type": "string"
            }
          },
          {
            "description": "Filter attractions by classification name: name of any segment, genre, sub-genre, type, sub-type",
            "example": "",
            "explode": true,
            "in": "query",
            "name": "classificationName",
            "required": false,
            "schema": {
              "default": "",
              "type": "array"
            }
          },
          {
            "description": "Filter attractions by classification id: id of any segment, genre, sub-genre, type, sub-type",
            "example": "",
            "explode": true,
            "in": "query",
            "name": "classificationId",
            "required": false,
            "schema": {
              "default": "",
              "type": "array"
            }
          },
          {
            "description": "Keyword to search on",
            "example": "",
            "in": "query",
            "name": "keyword",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter entities by its id",
            "example": "",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter entities by its source name",
            "example": "",
            "in": "query",
            "name": "source",
            "required": false,
            "schema": {
              "default": "",
              "enum": [
                "ticketmaster",
                " universe",
                " frontgate",
                " tmr"
              ],
              "type": "string"
            }
          },
          {
            "description": "True if you want to have entities flag as test in the response. Only, if you only wanted test entities",
            "example": "",
            "in": "query",
            "name": "includeTest",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no",
                " only"
              ],
              "pattern": "^\\s*|yes|no|only$",
              "type": "string"
            }
          },
          {
            "description": "Page number",
            "example": "",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": "0",
              "minimum": 0,
              "type": "string"
            }
          },
          {
            "description": "Page size of the response",
            "example": "",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "default": "20",
              "maximum": 500,
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "description": "The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ",
            "example": "en-us,en,fr",
            "in": "query",
            "name": "locale",
            "required": false,
            "schema": {
              "default": "en",
              "pattern": "(?i)^(\\s*|\\*)$|^\\s*[a-z]{2}(-[a-z]{2})?(\\s*,\\s*[a-z]{2}(-[a-z]{2})?)*\\s*(,\\s*\\*{0,1}+\\s*)?$",
              "type": "string"
            }
          },
          {
            "description": "Yes if you want to display licensed content",
            "example": "",
            "in": "query",
            "name": "includeLicensedContent",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no$",
              "type": "string"
            }
          },
          {
            "description": "yes, to include spell check suggestions in the response.",
            "example": "",
            "in": "query",
            "name": "includeSpellcheck",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Attraction"
                  },
                  "type": "array"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "description": "Find attractions (artists, sports, packages, plays and so on) and filter your search by name, and much more.",
        "operationId": "find",
        "summary": "Attraction Search"
      }
    },
    "/discovery/v2/attractions/{id}": {
      "get": {
        "parameters": [
          {
            "description": "ID of the attraction",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ",
            "example": "en-us,en,fr",
            "in": "query",
            "name": "locale",
            "required": false,
            "schema": {
              "default": "en",
              "pattern": "(?i)^(\\s*|\\*)$|^\\s*[a-z]{2}(-[a-z]{2})?(\\s*,\\s*[a-z]{2}(-[a-z]{2})?)*\\s*(,\\s*\\*{0,1}+\\s*)?$",
              "type": "string"
            }
          },
          {
            "description": "True if you want to display licensed content",
            "example": "",
            "in": "query",
            "name": "includeLicensedContent",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Attraction"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "description": "Get details for a specific attraction using the unique identifier for the attraction.",
        "operationId": "get",
        "summary": "Get Attraction Details"
      }
    },
    "/discovery/v2/classifications": {
      "get": {
        "parameters": [
          {
            "description": "Sorting order of the search result",
            "example": "",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "name,asc",
              "pattern": "^name,asc|name,desc$",
              "type": "string"
            }
          },
          {
            "description": "Keyword to search on",
            "example": "",
            "in": "query",
            "name": "keyword",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter entities by its id",
            "example": "",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter entities by its source name",
            "example": "",
            "in": "query",
            "name": "source",
            "required": false,
            "schema": {
              "default": "",
              "enum": [
                "ticketmaster",
                " universe",
                " frontgate",
                " tmr"
              ],
              "type": "string"
            }
          },
          {
            "description": "True if you want to have entities flag as test in the response. Only, if you only wanted test entities",
            "example": "",
            "in": "query",
            "name": "includeTest",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no",
                " only"
              ],
              "pattern": "^\\s*|yes|no|only$",
              "type": "string"
            }
          },
          {
            "description": "Page number",
            "example": "",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": "0",
              "minimum": 0,
              "type": "string"
            }
          },
          {
            "description": "Page size of the response",
            "example": "",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "default": "20",
              "maximum": 500,
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "description": "The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ",
            "example": "en-us,en,fr",
            "in": "query",
            "name": "locale",
            "required": false,
            "schema": {
              "default": "en",
              "pattern": "(?i)^(\\s*|\\*)$|^\\s*[a-z]{2}(-[a-z]{2})?(\\s*,\\s*[a-z]{2}(-[a-z]{2})?)*\\s*(,\\s*\\*{0,1}+\\s*)?$",
              "type": "string"
            }
          },
          {
            "description": "Yes if you want to display licensed content",
            "example": "",
            "in": "query",
            "name": "includeLicensedContent",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no$",
              "type": "string"
            }
          },
          {
            "description": "yes, to include spell check suggestions in the response.",
            "example": "",
            "in": "query",
            "name": "includeSpellcheck",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Classification"
                  },
                  "type": "array"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "description": "Find classifications and filter your search by name, and much more. Classifications help define the nature of attractions and events.",
        "operationId": "find",
        "summary": "Classification Search"
      }
    },
    "/discovery/v2/classifications/genres/{id}": {
      "get": {
        "parameters": [
          {
            "description": "ID of the genre",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ",
            "example": "en-us,en,fr",
            "in": "query",
            "name": "locale",
            "required": false,
            "schema": {
              "default": "en",
              "pattern": "(?i)^(\\s*|\\*)$|^\\s*[a-z]{2}(-[a-z]{2})?(\\s*,\\s*[a-z]{2}(-[a-z]{2})?)*\\s*(,\\s*\\*{0,1}+\\s*)?$",
              "type": "string"
            }
          },
          {
            "description": "True if you want to display licensed content",
            "example": "",
            "in": "query",
            "name": "includeLicensedContent",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Genre"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "description": "Get details for a specific genre using its unique identifier.",
        "operationId": "getGenre",
        "summary": "Get Genre Details"
      }
    },
    "/discovery/v2/classifications/segments/{id}": {
      "get": {
        "parameters": [
          {
            "description": "ID of the segment",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ",
            "example": "en-us,en,fr",
            "in": "query",
            "name": "locale",
            "required": false,
            "schema": {
              "default": "en",
              "pattern": "(?i)^(\\s*|\\*)$|^\\s*[a-z]{2}(-[a-z]{2})?(\\s*,\\s*[a-z]{2}(-[a-z]{2})?)*\\s*(,\\s*\\*{0,1}+\\s*)?$",
              "type": "string"
            }
          },
          {
            "description": "True if you want to display licensed content",
            "example": "",
            "in": "query",
            "name": "includeLicensedContent",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Segment"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "description": "Get details for a specific segment using its unique identifier.",
        "operationId": "getSegment",
        "summary": "Get Segment Details"
      }
    },
    "/discovery/v2/classifications/subgenres/{id}": {
      "get": {
        "parameters": [
          {
            "description": "ID of the subgenre",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ",
            "example": "en-us,en,fr",
            "in": "query",
            "name": "locale",
            "required": false,
            "schema": {
              "default": "en",
              "pattern": "(?i)^(\\s*|\\*)$|^\\s*[a-z]{2}(-[a-z]{2})?(\\s*,\\s*[a-z]{2}(-[a-z]{2})?)*\\s*(,\\s*\\*{0,1}+\\s*)?$",
              "type": "string"
            }
          },
          {
            "description": "True if you want to display licensed content",
            "example": "",
            "in": "query",
            "name": "includeLicensedContent",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Level"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "description": "Get details for a specific sub-genre using its unique identifier.",
        "operationId": "getSubgenre",
        "summary": "Get Sub-Genre Details"
      }
    },
    "/discovery/v2/classifications/{id}": {
      "get": {
        "parameters": [
          {
            "description": "ID of the segment, genre, or sub-genre",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ",
            "example": "en-us,en,fr",
            "in": "query",
            "name": "locale",
            "required": false,
            "schema": {
              "default": "en",
              "pattern": "(?i)^(\\s*|\\*)$|^\\s*[a-z]{2}(-[a-z]{2})?(\\s*,\\s*[a-z]{2}(-[a-z]{2})?)*\\s*(,\\s*\\*{0,1}+\\s*)?$",
              "type": "string"
            }
          },
          {
            "description": "True if you want to display licensed content",
            "example": "",
            "in": "query",
            "name": "includeLicensedContent",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Classification"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "description": "Get details for a specific segment, genre, or sub-genre using its unique identifier.",
        "operationId": "get",
        "summary": "Get Classification Details"
      }
    },
    "/discovery/v2/events": {
      "get": {
        "parameters": [
          {
            "description": "Sorting order of the search result. Allowable values : 'name,asc', 'name,desc', 'date,asc', 'date,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'name,date,asc', 'name,date,desc', 'date,name,asc', 'date,name,desc','onsaleStartDate,asc', 'id,asc'",
            "example": "",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "relevance,desc",
              "pattern": "^((name|date|relevance|name,date|date,name),(asc|desc))|(distance,asc)|(onSaleStartDate,asc)|(id,asc)$",
              "type": "string"
            }
          },
          {
            "description": "Filter events with a start date after this date",
            "example": "",
            "in": "query",
            "name": "startDateTime",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter events with a start date before this date",
            "example": "",
            "in": "query",
            "name": "endDateTime",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter events with onsale start date after this date",
            "example": "",
            "in": "query",
            "name": "onsaleStartDateTime",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter events with onsale start date on this date",
            "example": "",
            "in": "query",
            "name": "onsaleOnStartDate",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter events with onsale range within this date",
            "example": "",
            "in": "query",
            "name": "onsaleOnAfterStartDate",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter events with onsale end date before this date",
            "example": "",
            "in": "query",
            "name": "onsaleEndDateTime",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter events by city",
            "example": "",
            "in": "query",
            "name": "city",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter events by country code",
            "example": "",
            "in": "query",
            "name": "countryCode",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter events by state code",
            "example": "",
            "in": "query",
            "name": "stateCode",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter events by postal code / zipcode",
            "example": "",
            "in": "query",
            "name": "postalCode",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter events by venue id",
            "example": "",
            "in": "query",
            "name": "venueId",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter events by attraction id",
            "example": "",
            "in": "query",
            "name": "attractionId",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter events by segment id",
            "example": "",
            "in": "query",
            "name": "segmentId",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter events by segment name",
            "example": "",
            "in": "query",
            "name": "segmentName",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter events by classification name: name of any segment, genre, sub-genre, type, sub-type",
            "example": "",
            "explode": true,
            "in": "query",
            "name": "classificationName",
            "required": false,
            "schema": {
              "default": "",
              "type": "array"
            }
          },
          {
            "description": "Filter events by classification id: id of any segment, genre, sub-genre, type, sub-type",
            "example": "",
            "explode": true,
            "in": "query",
            "name": "classificationId",
            "required": false,
            "schema": {
              "default": "",
              "type": "array"
            }
          },
          {
            "description": "Filter events by market id",
            "example": "",
            "in": "query",
            "name": "marketId",
            "required": false,
            "schema": {
              "default": "",
              "pattern": "^\\s*$|^(\\d+(,\\d+)*)?$",
              "type": "string"
            }
          },
          {
            "description": "Filter events by promoter id",
            "example": "",
            "in": "query",
            "name": "promoterId",
            "required": false,
            "schema": {
              "default": "",
              "pattern": "^\\s*$|^(\\d+(,\\d+)*)?$",
              "type": "string"
            }
          },
          {
            "description": "Filter events by dma id",
            "example": "",
            "in": "query",
            "name": "dmaId",
            "required": false,
            "schema": {
              "default": "",
              "pattern": "^\\s*$|^(\\d+(,\\d+)*)?$",
              "type": "string"
            }
          },
          {
            "description": "True, to include events with date to be announce (TBA)",
            "example": "",
            "in": "query",
            "name": "includeTBA",
            "required": false,
            "schema": {
              "default": "no if date parameter sent, yes otherwise",
              "enum": [
                "yes",
                " no",
                " only"
              ],
              "pattern": "^\\s*|yes|no|only$",
              "type": "string"
            }
          },
          {
            "description": "True, to include event with a date to be defined (TBD)",
            "example": "",
            "in": "query",
            "name": "includeTBD",
            "required": false,
            "schema": {
              "default": "no if date parameter sent, yes otherwise",
              "enum": [
                "yes",
                " no",
                " only"
              ],
              "pattern": "^\\s*|yes|no|only$",
              "type": "string"
            }
          },
          {
            "description": "Filter events by clientName",
            "example": "",
            "in": "query",
            "name": "clientVisibility",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead",
            "example": "33.80003000,-117.88304300",
            "in": "query",
            "name": "latlong",
            "required": false,
            "schema": {
              "default": "",
              "pattern": "^\\s*$|^-?(90(\\.0+)?|[0-8]?[0-9](\\.\\d+)?),-?(180(\\.0+)?|(1[0-7][0-9]|\\d{1,2})(\\.\\d+)?)$",
              "type": "string"
            }
          },
          {
            "description": "Radius of the area in which we want to search for events.",
            "example": "",
            "in": "query",
            "name": "radius",
            "required": false,
            "schema": {
              "default": "50",
              "pattern": "^\\s*$|^0*1?\\d{1,4}$",
              "type": "string"
            }
          },
          {
            "description": "Unit of the radius",
            "example": "",
            "in": "query",
            "name": "unit",
            "required": false,
            "schema": {
              "default": "miles",
              "enum": [
                "miles",
                "km"
              ],
              "pattern": "^\\s*|miles|km$",
              "type": "string"
            }
          },
          {
            "description": "filter events by geoHash",
            "example": "dr5rh",
            "in": "query",
            "name": "geoPoint",
            "required": false,
            "schema": {
              "default": "",
              "pattern": "^\\s*$|^-?(90(\\.0+)?|[0-8]?[0-9](\\.\\d+)?),-?(180(\\.0+)?|(1[0-7][0-9]|\\d{1,2})(\\.\\d+)?)$|^[a-zA-Z0-9]{1,9}$",
              "type": "string"
            }
          },
          {
            "description": "Keyword to search on",
            "example": "",
            "in": "query",
            "name": "keyword",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter entities by its id",
            "example": "",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter entities by its source name",
            "example": "",
            "in": "query",
            "name": "source",
            "required": false,
            "schema": {
              "default": "",
              "enum": [
                "ticketmaster",
                " universe",
                " frontgate",
                " tmr"
              ],
              "type": "string"
            }
          },
          {
            "description": "True if you want to have entities flag as test in the response. Only, if you only wanted test entities",
            "example": "",
            "in": "query",
            "name": "includeTest",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no",
                " only"
              ],
              "pattern": "^\\s*|yes|no|only$",
              "type": "string"
            }
          },
          {
            "description": "Page number",
            "example": "",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": "0",
              "minimum": 0,
              "type": "string"
            }
          },
          {
            "description": "Page size of the response",
            "example": "",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "default": "20",
              "maximum": 500,
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "description": "The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ",
            "example": "en-us,en,fr",
            "in": "query",
            "name": "locale",
            "required": false,
            "schema": {
              "default": "en",
              "pattern": "(?i)^(\\s*|\\*)$|^\\s*[a-z]{2}(-[a-z]{2})?(\\s*,\\s*[a-z]{2}(-[a-z]{2})?)*\\s*(,\\s*\\*{0,1}+\\s*)?$",
              "type": "string"
            }
          },
          {
            "description": "Yes if you want to display licensed content",
            "example": "",
            "in": "query",
            "name": "includeLicensedContent",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no$",
              "type": "string"
            }
          },
          {
            "description": "yes, to include spell check suggestions in the response.",
            "example": "",
            "in": "query",
            "name": "includeSpellcheck",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  },
                  "type": "array"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "description": "Find events and filter your search by location, date, availability, and much more.",
        "operationId": "find",
        "summary": "Event Search"
      }
    },
    "/discovery/v2/events/{id}": {
      "get": {
        "parameters": [
          {
            "description": "ID of the event",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ",
            "example": "en-us,en,fr",
            "in": "query",
            "name": "locale",
            "required": false,
            "schema": {
              "default": "en",
              "pattern": "(?i)^(\\s*|\\*)$|^\\s*[a-z]{2}(-[a-z]{2})?(\\s*,\\s*[a-z]{2}(-[a-z]{2})?)*\\s*(,\\s*\\*{0,1}+\\s*)?$",
              "type": "string"
            }
          },
          {
            "description": "True if you want to display licensed content",
            "example": "",
            "in": "query",
            "name": "includeLicensedContent",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "description": "Get details for a specific event using the unique identifier for the event. This includes the venue and location, the attraction(s), and the Ticketmaster Website URL for purchasing tickets for the event.",
        "operationId": "get",
        "summary": "Get Event Details"
      }
    },
    "/discovery/v2/events/{id}/images": {
      "get": {
        "parameters": [
          {
            "description": "ID of the event",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ",
            "example": "en-us,en,fr",
            "in": "query",
            "name": "locale",
            "required": false,
            "schema": {
              "default": "en",
              "pattern": "(?i)^(\\s*|\\*)$|^\\s*[a-z]{2}(-[a-z]{2})?(\\s*,\\s*[a-z]{2}(-[a-z]{2})?)*\\s*(,\\s*\\*{0,1}+\\s*)?$",
              "type": "string"
            }
          },
          {
            "description": "True if you want to display licensed content",
            "example": "",
            "in": "query",
            "name": "includeLicensedContent",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventImages"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "description": "Get images for a specific event using the unique identifier for the event.",
        "operationId": "getImages",
        "summary": "Get Event Images"
      }
    },
    "/discovery/v2/suggest": {
      "get": {
        "parameters": [
          {
            "description": "Keyword to search on",
            "example": "",
            "in": "query",
            "name": "keyword",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter entities by its source name",
            "example": "",
            "in": "query",
            "name": "source",
            "required": false,
            "schema": {
              "default": "",
              "enum": [
                "ticketmaster",
                " universe",
                " frontgate",
                " tmr"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead",
            "example": "33.80003000,-117.88304300",
            "in": "query",
            "name": "latlong",
            "required": false,
            "schema": {
              "default": "",
              "pattern": "^\\s*$|^-?(90(\\.0+)?|[0-8]?[0-9](\\.\\d+)?),-?(180(\\.0+)?|(1[0-7][0-9]|\\d{1,2})(\\.\\d+)?)$",
              "type": "string"
            }
          },
          {
            "description": "Radius of the area in which we want to search for events.",
            "example": "",
            "in": "query",
            "name": "radius",
            "required": false,
            "schema": {
              "default": "100",
              "pattern": "^\\s*$|^0*1?\\d{1,4}$",
              "type": "string"
            }
          },
          {
            "description": "Unit of the radius",
            "example": "",
            "in": "query",
            "name": "unit",
            "required": false,
            "schema": {
              "default": "miles",
              "enum": [
                "miles",
                "km"
              ],
              "pattern": "^\\s*|miles|km$",
              "type": "string"
            }
          },
          {
            "description": "Size of every entity returned in the response",
            "example": "",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "default": "5",
              "maximum": 5,
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "description": "yes, to include fuzzy matches in the search. This has performance impact.",
            "example": "",
            "in": "query",
            "name": "includeFuzzy",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no",
              "type": "string"
            }
          },
          {
            "description": "Filter events to clientName",
            "example": "",
            "in": "query",
            "name": "clientVisibility",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter suggestions by country code",
            "example": "",
            "in": "query",
            "name": "countryCode",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "True, to include events with date to be announce (TBA)",
            "example": "",
            "in": "query",
            "name": "includeTBA",
            "required": false,
            "schema": {
              "default": "no if date parameter sent, yes otherwise",
              "enum": [
                "yes",
                " no",
                " only"
              ],
              "pattern": "^\\s*|yes|no|only$",
              "type": "string"
            }
          },
          {
            "description": "True, to include event with a date to be defined (TBD)",
            "example": "",
            "in": "query",
            "name": "includeTBD",
            "required": false,
            "schema": {
              "default": "no if date parameter sent, yes otherwise",
              "enum": [
                "yes",
                " no",
                " only"
              ],
              "pattern": "^\\s*|yes|no|only$",
              "type": "string"
            }
          },
          {
            "description": "Filter suggestions by segment id",
            "example": "",
            "in": "query",
            "name": "segmentId",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "filter events by geoHash",
            "example": "dr5rh",
            "in": "query",
            "name": "geoPoint",
            "required": false,
            "schema": {
              "default": "",
              "pattern": "^\\s*$|^-?(90(\\.0+)?|[0-8]?[0-9](\\.\\d+)?),-?(180(\\.0+)?|(1[0-7][0-9]|\\d{1,2})(\\.\\d+)?)$|^[a-zA-Z0-9]{1,9}$",
              "type": "string"
            }
          },
          {
            "description": "The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ",
            "example": "en-us,en,fr",
            "in": "query",
            "name": "locale",
            "required": false,
            "schema": {
              "default": "en",
              "pattern": "(?i)^(\\s*|\\*)$|^\\s*[a-z]{2}(-[a-z]{2})?(\\s*,\\s*[a-z]{2}(-[a-z]{2})?)*\\s*(,\\s*\\*{0,1}+\\s*)?$",
              "type": "string"
            }
          },
          {
            "description": "Yes if you want to display licensed content",
            "example": "",
            "in": "query",
            "name": "includeLicensedContent",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no$",
              "type": "string"
            }
          },
          {
            "description": "yes, to include spell check suggestions in the response.",
            "example": "",
            "in": "query",
            "name": "includeSpellcheck",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/hal+json; charset=utf-8": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "Find search suggestions and filter your suggestions by location, source, etc.",
        "operationId": "find",
        "summary": "Find Suggest"
      }
    },
    "/discovery/v2/venues": {
      "get": {
        "parameters": [
          {
            "description": "Sorting order of the search result. Allowable Values: 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'distance,desc'",
            "example": "",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "relevance,desc",
              "pattern": "^(name|relevance|distance),(asc|desc)$",
              "type": "string"
            }
          },
          {
            "description": "Filter venues by state / province code",
            "example": "",
            "in": "query",
            "name": "stateCode",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter venues by country code",
            "example": "",
            "in": "query",
            "name": "countryCode",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead",
            "example": "33.80003000,-117.88304300",
            "in": "query",
            "name": "latlong",
            "required": false,
            "schema": {
              "default": "",
              "pattern": "^\\s*$|^-?(90(\\.0+)?|[0-8]?[0-9](\\.\\d+)?),-?(180(\\.0+)?|(1[0-7][0-9]|\\d{1,2})(\\.\\d+)?)$",
              "type": "string"
            }
          },
          {
            "description": "Radius of the area in which we want to search for events.",
            "example": "",
            "in": "query",
            "name": "radius",
            "required": false,
            "schema": {
              "default": "50",
              "pattern": "^\\s*$|^0*1?\\d{1,4}$",
              "type": "string"
            }
          },
          {
            "description": "Unit of the radius",
            "example": "",
            "in": "query",
            "name": "unit",
            "required": false,
            "schema": {
              "default": "miles",
              "enum": [
                "miles",
                "km"
              ],
              "pattern": "^\\s*|miles|km$",
              "type": "string"
            }
          },
          {
            "description": "filter events by geoHash",
            "example": "dr5rh",
            "in": "query",
            "name": "geoPoint",
            "required": false,
            "schema": {
              "default": "",
              "pattern": "^\\s*$|^-?(90(\\.0+)?|[0-8]?[0-9](\\.\\d+)?),-?(180(\\.0+)?|(1[0-7][0-9]|\\d{1,2})(\\.\\d+)?)$|^[a-zA-Z0-9]{1,9}$",
              "type": "string"
            }
          },
          {
            "description": "Keyword to search on",
            "example": "",
            "in": "query",
            "name": "keyword",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter entities by its id",
            "example": "",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Filter entities by its source name",
            "example": "",
            "in": "query",
            "name": "source",
            "required": false,
            "schema": {
              "default": "",
              "enum": [
                "ticketmaster",
                " universe",
                " frontgate",
                " tmr"
              ],
              "type": "string"
            }
          },
          {
            "description": "True if you want to have entities flag as test in the response. Only, if you only wanted test entities",
            "example": "",
            "in": "query",
            "name": "includeTest",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no",
                " only"
              ],
              "pattern": "^\\s*|yes|no|only$",
              "type": "string"
            }
          },
          {
            "description": "Page number",
            "example": "",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": "0",
              "minimum": 0,
              "type": "string"
            }
          },
          {
            "description": "Page size of the response",
            "example": "",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "default": "20",
              "maximum": 500,
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "description": "The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ",
            "example": "en-us,en,fr",
            "in": "query",
            "name": "locale",
            "required": false,
            "schema": {
              "default": "en",
              "pattern": "(?i)^(\\s*|\\*)$|^\\s*[a-z]{2}(-[a-z]{2})?(\\s*,\\s*[a-z]{2}(-[a-z]{2})?)*\\s*(,\\s*\\*{0,1}+\\s*)?$",
              "type": "string"
            }
          },
          {
            "description": "Yes if you want to display licensed content",
            "example": "",
            "in": "query",
            "name": "includeLicensedContent",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no$",
              "type": "string"
            }
          },
          {
            "description": "yes, to include spell check suggestions in the response.",
            "example": "",
            "in": "query",
            "name": "includeSpellcheck",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Venue"
                  },
                  "type": "array"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "description": "Find venues and filter your search by name, and much more.",
        "operationId": "find",
        "summary": "Venue Search"
      }
    },
    "/discovery/v2/venues/{id}": {
      "get": {
        "parameters": [
          {
            "description": "ID of the venue",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ",
            "example": "en-us,en,fr",
            "in": "query",
            "name": "locale",
            "required": false,
            "schema": {
              "default": "en",
              "pattern": "(?i)^(\\s*|\\*)$|^\\s*[a-z]{2}(-[a-z]{2})?(\\s*,\\s*[a-z]{2}(-[a-z]{2})?)*\\s*(,\\s*\\*{0,1}+\\s*)?$",
              "type": "string"
            }
          },
          {
            "description": "True if you want to display licensed content",
            "example": "",
            "in": "query",
            "name": "includeLicensedContent",
            "required": false,
            "schema": {
              "default": "no",
              "enum": [
                "yes",
                " no"
              ],
              "pattern": "^\\s*|yes|no$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Venue"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "description": "Get details for a specific venue using the unique identifier for the venue.",
        "operationId": "get",
        "summary": "Get Venue Details"
      }
    }
  },
  "components": {
    "schemas": {
      "AccessDates": {
        "description": "Event's Access Date",
        "properties": {
          "endApproximate": {
            "default": false,
            "description": "Boolean flag to indicate whether or not the access end date is approximated",
            "example": "yyyy-MM-ddThh-mm-ssZ",
            "position": 3,
            "type": "boolean"
          },
          "endDateTime": {
            "description": "Event's end access time",
            "example": "yyyy-MM-ddThh-mm-ssZ",
            "format": "date-time",
            "position": 2,
            "type": "string"
          },
          "startApproximate": {
            "default": false,
            "description": "Boolean flag to indicate whether or not the access start date is approximated",
            "position": 1,
            "type": "boolean"
          },
          "startDateTime": {
            "description": "Event's start access time",
            "example": "yyyy-MM-ddThh-mm-ssZ",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Accessibility": {
        "description": "Additional information for people who experience disabilities",
        "properties": {
          "info": {
            "description": "Accessibility's information",
            "position": 1,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Address": {
        "description": "Address",
        "properties": {
          "line1": {
            "description": "Address first line",
            "type": "string"
          },
          "line2": {
            "description": "Address second line",
            "position": 3,
            "type": "string"
          },
          "line3": {
            "description": "Address third line",
            "position": 3,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Area": {
        "description": "Area",
        "properties": {
          "name": {
            "description": "Name of the entity",
            "position": 10,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Attraction": {
        "description": "Attraction",
        "properties": {
          "additionalInfo": {
            "description": "Additional information of the entity",
            "position": 22,
            "type": "string"
          },
          "classifications": {
            "description": "Attraction's classifications",
            "items": {
              "$ref": "#/components/schemas/Classification"
            },
            "position": 30,
            "type": "array"
          },
          "description": {
            "description": "Description's of the entity",
            "position": 20,
            "type": "string"
          },
          "externalLinks": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/ExternalLink"
              },
              "type": "array"
            },
            "description": "List of external links",
            "position": 79,
            "type": "object"
          },
          "id": {
            "description": "Unique id of the entity in the discovery API",
            "position": 1,
            "type": "string"
          },
          "images": {
            "description": "Images of the entity",
            "items": {
              "$ref": "#/components/schemas/Image"
            },
            "position": 29,
            "type": "array",
            "uniqueItems": true
          },
          "locale": {
            "description": "Locale in which the content is returned",
            "position": 3,
            "type": "string"
          },
          "name": {
            "description": "Name of the entity",
            "position": 10,
            "type": "string"
          },
          "test": {
            "default": false,
            "description": "Indicate if this is a test entity, by default test entities won't appear in discovery API",
            "position": 96,
            "type": "boolean"
          },
          "type": {
            "description": "Type of the entity",
            "enum": [
              "event",
              "venue",
              "attraction"
            ],
            "type": "string"
          },
          "upcomingEvents": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "description": "number of upcoming events",
            "position": 110,
            "type": "object"
          },
          "url": {
            "description": "URL of a web site detail page of the entity",
            "position": 24,
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "AttractionExtensions": {
        "description": "All Attraction's extensions",
        "type": "object"
      },
      "Attribution": {
        "description": "Attribution",
        "properties": {
          "licenceName": {
            "description": "LicenceName",
            "type": "string"
          },
          "licenceUrl": {
            "description": "LicenceUrl",
            "type": "string"
          },
          "sourceName": {
            "description": "SourceName",
            "type": "string"
          },
          "sourceUrl": {
            "description": "SourceUrl",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Attributions": {
        "description": "Attributions",
        "properties": {
          "description": {
            "$ref": "#/components/schemas/Attribution",
            "description": "Attribution description"
          },
          "descriptions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Attribution"
            },
            "description": "Attribution descriptions - multi-lingual fields",
            "type": "object"
          }
        },
        "type": "object"
      },
      "Chronology": {
        "properties": {
          "zone": {
            "$ref": "#/components/schemas/DateTimeZone"
          }
        },
        "type": "object"
      },
      "City": {
        "description": "City",
        "properties": {
          "name": {
            "description": "Name of the entity",
            "position": 10,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Classification": {
        "description": "Classification",
        "properties": {
          "genre": {
            "$ref": "#/components/schemas/Level",
            "description": "Secondary Genre to further describe an entity (Rock, Classical, Animation, etc)",
            "position": 2
          },
          "primary": {
            "default": false,
            "description": "True if this is the entity's primary classification",
            "type": "boolean"
          },
          "segment": {
            "$ref": "#/components/schemas/Segment",
            "description": "A Segment is a primary genre for an entity (Music, Sports, Arts, etc)",
            "position": 1
          },
          "subGenre": {
            "$ref": "#/components/schemas/Level",
            "description": "Tertiary Genre for additional detail when describring an entity (Alternative Rock, Ambient Pop, etc)",
            "position": 3
          },
          "subType": {
            "$ref": "#/components/schemas/Level",
            "description": "Secondary Type to further categorize an entity (Band, Choir, Chorus, etc)",
            "position": 6
          },
          "type": {
            "$ref": "#/components/schemas/Level",
            "description": "A Type represents a kind or group of people. (Donation, Group, Individual, Merchandise, Event Style, etc)",
            "position": 5
          }
        },
        "type": "object"
      },
      "Country": {
        "description": "Country",
        "properties": {
          "countryCode": {
            "description": "Country code (ISO 3166)",
            "type": "string"
          },
          "name": {
            "description": "Name of the entity",
            "position": 10,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DateTimeField": {
        "properties": {
          "durationField": {
            "$ref": "#/components/schemas/DurationField"
          },
          "leapDurationField": {
            "$ref": "#/components/schemas/DurationField"
          },
          "lenient": {
            "default": false,
            "type": "boolean"
          },
          "maximumValue": {
            "format": "int32",
            "type": "integer"
          },
          "minimumValue": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "rangeDurationField": {
            "$ref": "#/components/schemas/DurationField"
          },
          "supported": {
            "default": false,
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/DateTimeFieldType"
          }
        },
        "type": "object"
      },
      "DateTimeFieldType": {
        "properties": {
          "durationType": {
            "$ref": "#/components/schemas/DurationFieldType"
          },
          "name": {
            "type": "string"
          },
          "rangeDurationType": {
            "$ref": "#/components/schemas/DurationFieldType"
          }
        },
        "type": "object"
      },
      "DateTimeZone": {
        "properties": {
          "fixed": {
            "default": false,
            "type": "boolean"
          },
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DisplaySettingExtension": {
        "description": "Event's display settings extension",
        "properties": {
          "softLanding": {
            "default": false,
            "description": "True the landing is Soft otherwise it's Comingled",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Dma": {
        "description": "DMA (Designated Market Area)",
        "properties": {
          "id": {
            "description": "DMS's id",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DurationField": {
        "properties": {
          "name": {
            "type": "string"
          },
          "precise": {
            "default": false,
            "type": "boolean"
          },
          "supported": {
            "default": false,
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/DurationFieldType"
          },
          "unitMillis": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DurationFieldType": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndDates": {
        "description": "Event's End Dates",
        "properties": {
          "approximate": {
            "default": false,
            "description": "Boolean flag to indicate whether or not the end date is approximated",
            "position": 3,
            "type": "boolean"
          },
          "dateTime": {
            "description": "The event end date time",
            "example": "yyyy-MM-ddThh-mm-ssZ",
            "format": "date-time",
            "position": 2,
            "type": "string"
          },
          "localDate": {
            "description": "The event end date in local date",
            "example": "yyyy-MM-dd",
            "format": "date",
            "type": "string"
          },
          "localTime": {
            "$ref": "#/components/schemas/LocalTime",
            "description": "The event end time in local time",
            "example": "yyyy-MM-dd",
            "position": 1
          },
          "noSpecificTime": {
            "default": false,
            "description": "Boolean flag to indicate whether or not the event end time has no specific time",
            "position": 4,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EntityChanges": {
        "properties": {
          "changes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "newlyCreated": {
            "default": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Event": {
        "description": "Event",
        "properties": {
          "info": {
            "description": "Any information related to the event",
            "position": 32,
            "type": "string"
          },
          "accessibility": {
            "$ref": "#/components/schemas/Accessibility",
            "description": "Additional information for people who experience disabilities",
            "position": 44
          },
          "additionalInfo": {
            "description": "Additional information of the entity",
            "position": 22,
            "type": "string"
          },
          "classifications": {
            "description": "Event's classifications",
            "items": {
              "$ref": "#/components/schemas/Classification"
            },
            "position": 50,
            "type": "array"
          },
          "dates": {
            "$ref": "#/components/schemas/EventDates",
            "description": "Event's dates information",
            "position": 31
          },
          "description": {
            "description": "Description's of the entity",
            "position": 20,
            "type": "string"
          },
          "distance": {
            "format": "double",
            "type": "number"
          },
          "externalLinks": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/ExternalLink"
              },
              "type": "array"
            },
            "description": "List of external links",
            "position": 79,
            "type": "object"
          },
          "id": {
            "description": "Unique id of the entity in the discovery API",
            "position": 1,
            "type": "string"
          },
          "images": {
            "description": "Images of the entity",
            "items": {
              "$ref": "#/components/schemas/Image"
            },
            "position": 29,
            "type": "array",
            "uniqueItems": true
          },
          "locale": {
            "description": "Locale in which the content is returned",
            "position": 3,
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "name": {
            "description": "Name of the entity",
            "position": 10,
            "type": "string"
          },
          "outlets": {
            "description": "Related outlets informations",
            "items": {
              "$ref": "#/components/schemas/Outlet"
            },
            "position": 37,
            "type": "array"
          },
          "place": {
            "$ref": "#/components/schemas/Place",
            "description": "Place has the information on where the event happens. It can be set if there is no venue",
            "position": 51
          },
          "pleaseNote": {
            "description": "Any notes related to the event",
            "position": 34,
            "type": "string"
          },
          "priceRanges": {
            "description": "Price ranges of this event",
            "items": {
              "$ref": "#/components/schemas/PriceRange"
            },
            "position": 36,
            "type": "array",
            "uniqueItems": true
          },
          "products": {
            "description": "Related products informations",
            "items": {
              "$ref": "#/components/schemas/Product"
            },
            "position": 38,
            "type": "array"
          },
          "promoter": {
            "$ref": "#/components/schemas/Promoter",
            "description": "Event's promoter",
            "position": 37
          },
          "promoters": {
            "description": "Event's promoters",
            "items": {
              "$ref": "#/components/schemas/Promoter"
            },
            "position": 37,
            "type": "array"
          },
          "sales": {
            "$ref": "#/components/schemas/EventSalesDates",
            "description": "Event's sales dates information",
            "position": 32
          },
          "seatmap": {
            "$ref": "#/components/schemas/SeatMap",
            "description": "Event's seatmap",
            "position": 43
          },
          "test": {
            "default": false,
            "description": "Indicate if this is a test entity, by default test entities won't appear in discovery API",
            "position": 96,
            "type": "boolean"
          },
          "type": {
            "description": "Type of the entity",
            "enum": [
              "event",
              "venue",
              "attraction"
            ],
            "type": "string"
          },
          "units": {
            "type": "string"
          },
          "url": {
            "description": "URL of a web site detail page of the entity",
            "position": 24,
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "EventDates": {
        "description": "Event's Dates",
        "properties": {
          "access": {
            "$ref": "#/components/schemas/AccessDates",
            "description": "Event's access dates. The date and time the fan can access the event",
            "position": 2
          },
          "end": {
            "$ref": "#/components/schemas/EndDates",
            "description": "Event's end dates. The date and time when the event will end",
            "position": 1
          },
          "spanMultipleDays": {
            "default": false,
            "description": "Flag indicating if date spans of multiple days",
            "position": 5,
            "type": "boolean"
          },
          "start": {
            "$ref": "#/components/schemas/StartDates",
            "description": "Event's start dates. The date and time when the event will start"
          },
          "status": {
            "$ref": "#/components/schemas/EventStatus",
            "description": "Status of the event",
            "position": 4
          },
          "timezone": {
            "description": "Event's timezone",
            "position": 3,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventExtensions": {
        "description": "All Event's extensions",
        "type": "object"
      },
      "EventImages": {
        "description": "This class defines an Event with only images view on the Discovery API",
        "properties": {
          "id": {
            "description": "Unique id of the entity in the discovery API",
            "position": 1,
            "type": "string"
          },
          "images": {
            "description": "Images of the entity",
            "items": {
              "$ref": "#/components/schemas/Image"
            },
            "position": 2,
            "type": "array",
            "uniqueItems": true
          },
          "type": {
            "description": "Type of the entity",
            "enum": [
              "event"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "EventSalesDates": {
        "description": "Event's Sales Dates",
        "properties": {
          "presales": {
            "description": "Presale information on this event",
            "items": {
              "$ref": "#/components/schemas/Presale"
            },
            "position": 1,
            "type": "array"
          },
          "public": {
            "$ref": "#/components/schemas/PublicSaleDates",
            "description": "Public onsale information on this event"
          }
        },
        "type": "object"
      },
      "EventStatus": {
        "description": "Event's Status",
        "properties": {
          "code": {
            "description": "The event's status code",
            "enum": [
              "onsale",
              "offsale",
              "canceled",
              "postponed",
              "rescheduled"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Extension": {
        "type": "object"
      },
      "ExternalLink": {
        "description": "ExternalLink",
        "properties": {
          "id": {
            "description": "An external link id is the unique identifier of a resource on a different domain or api",
            "position": 2,
            "type": "string"
          },
          "url": {
            "description": "An external link url is a url that goes to a different domain or api",
            "position": 2,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Genre": {
        "description": "Secondary Genre",
        "properties": {
          "id": {
            "description": "The ID of the classification's level",
            "type": "string"
          },
          "name": {
            "description": "The Name of the classification's level",
            "position": 1,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GeocodeExtension": {
        "properties": {
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "county": {
            "type": "string"
          },
          "formattedAddress": {
            "type": "string"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "postalCode": {
            "type": "string"
          },
          "route": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "streetNumber": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GeolocationVenueExtensions": {
        "description": "Venue's geocode extension",
        "properties": {
          "geocode": {
            "$ref": "#/components/schemas/GeocodeExtension",
            "description": "Geocoding information about the venue"
          }
        },
        "type": "object"
      },
      "Geometry": {
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        },
        "type": "object"
      },
      "HostExtension": {
        "description": "Event's Host extension",
        "type": "object"
      },
      "Image": {
        "description": "Image",
        "properties": {
          "attribution": {
            "description": "Attribution of the image",
            "position": 8,
            "type": "string"
          },
          "fallback": {
            "default": false,
            "description": "true if the image is not the event's image but a fallbak image",
            "position": 6,
            "type": "boolean"
          },
          "height": {
            "description": "Height of the image",
            "format": "int32",
            "position": 5,
            "type": "integer"
          },
          "ratio": {
            "description": "Aspect ratio of the image",
            "enum": [
              "16_9",
              "3_2",
              "4_3"
            ],
            "position": 3,
            "type": "string"
          },
          "url": {
            "description": "Public URL of the image",
            "position": 2,
            "type": "string"
          },
          "width": {
            "description": "Width of the image",
            "format": "int32",
            "position": 4,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Level": {
        "properties": {
          "id": {
            "description": "The ID of the classification's level",
            "type": "string"
          },
          "name": {
            "description": "The Name of the classification's level",
            "position": 1,
            "type": "string"
          }
        },
        "type": "object"
      },
      "LocalTime": {
        "properties": {
          "chronology": {
            "$ref": "#/components/schemas/Chronology"
          },
          "fieldTypes": {
            "items": {
              "$ref": "#/components/schemas/DateTimeFieldType"
            },
            "type": "array"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/DateTimeField"
            },
            "type": "array"
          },
          "hourOfDay": {
            "format": "int32",
            "type": "integer"
          },
          "millisOfDay": {
            "format": "int32",
            "type": "integer"
          },
          "millisOfSecond": {
            "format": "int32",
            "type": "integer"
          },
          "minuteOfHour": {
            "format": "int32",
            "type": "integer"
          },
          "secondOfMinute": {
            "format": "int32",
            "type": "integer"
          },
          "values": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Locale": {
        "properties": {
          "country": {
            "type": "string"
          },
          "displayCountry": {
            "type": "string"
          },
          "displayLanguage": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "displayScript": {
            "type": "string"
          },
          "displayVariant": {
            "type": "string"
          },
          "extensionKeys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "iso3Country": {
            "type": "string"
          },
          "iso3Language": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "script": {
            "type": "string"
          },
          "unicodeLocaleAttributes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "unicodeLocaleKeys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "variant": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Location": {
        "description": "Location",
        "properties": {
          "latitude": {
            "description": "Latitude",
            "type": "number"
          },
          "longitude": {
            "description": "Longitude",
            "type": "number"
          }
        },
        "type": "object"
      },
      "Market": {
        "description": "Market",
        "properties": {
          "id": {
            "description": "Market's id",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Outlet": {
        "description": "A selling point for tickets.",
        "properties": {
          "type": {
            "description": "Outlet's type",
            "position": 2,
            "type": "string"
          },
          "url": {
            "description": "Outlet's url",
            "position": 1,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Parking": {
        "description": "Parking",
        "properties": {
          "name": {
            "description": "Name of the entity",
            "position": 10,
            "type": "string"
          },
          "url": {
            "description": "Url to the web page of the parking",
            "position": 20,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Place": {
        "description": "Place",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address",
            "description": "Address of the place",
            "position": 1
          },
          "area": {
            "$ref": "#/components/schemas/Area",
            "description": "Area of the place"
          },
          "city": {
            "$ref": "#/components/schemas/City",
            "description": "City of the Place",
            "position": 2
          },
          "country": {
            "$ref": "#/components/schemas/Country",
            "description": "Country of the place",
            "position": 4
          },
          "location": {
            "$ref": "#/components/schemas/Location",
            "description": "Location of the place",
            "position": 6
          },
          "name": {
            "description": "Name of the entity",
            "position": 10,
            "type": "string"
          },
          "postalCode": {
            "description": "Postal code / zipcode of the place",
            "position": 5,
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State",
            "description": "State / Province of the place",
            "position": 3
          }
        },
        "type": "object"
      },
      "Presale": {
        "description": "Event's Presale Info",
        "properties": {
          "description": {
            "description": "Description of the presame",
            "position": 1,
            "type": "string"
          },
          "endDateTime": {
            "description": "Presale's end dates. The date and time when the presale will end",
            "format": "date-time",
            "position": 5,
            "type": "string"
          },
          "name": {
            "description": "Name of the presale",
            "type": "string"
          },
          "startDateTime": {
            "description": "Presale's start dates. The date and time when the presale will start",
            "format": "date-time",
            "position": 4,
            "type": "string"
          },
          "url": {
            "description": "Presale link URL",
            "position": 3,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PriceRange": {
        "description": "PriceRange",
        "properties": {
          "currency": {
            "description": "Currency",
            "position": 1,
            "type": "string"
          },
          "max": {
            "description": "Maximum price",
            "format": "double",
            "position": 3,
            "type": "number"
          },
          "min": {
            "description": "Minimum price",
            "format": "double",
            "position": 2,
            "type": "number"
          },
          "type": {
            "description": "Type of price",
            "enum": [
              "standard"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Product": {
        "description": "Product",
        "properties": {
          "id": {
            "description": "Product's primary id",
            "position": 10,
            "type": "string"
          },
          "name": {
            "description": "Name of the entity",
            "position": 10,
            "type": "string"
          },
          "type": {
            "description": "Product's type",
            "position": 13,
            "type": "string"
          },
          "url": {
            "description": "Product's url",
            "position": 12,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Promoter": {
        "description": "Promoter",
        "properties": {
          "description": {
            "description": "Description of the promoter",
            "position": 3,
            "type": "string"
          },
          "id": {
            "description": "Id of the promoter",
            "type": "string"
          },
          "name": {
            "description": "Name of the promoter",
            "position": 1,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PublicSaleDates": {
        "description": "Event's Public Onsales Dates",
        "properties": {
          "endDateTime": {
            "description": "Public sale's end dates. The date and time when the public sale will end",
            "format": "date-time",
            "position": 1,
            "type": "string"
          },
          "startDateTime": {
            "description": "Public sale's start dates. The date and time when the public sale will start",
            "format": "date-time",
            "type": "string"
          },
          "startTBD": {
            "default": false,
            "description": "True if the public sale's date is to be determined",
            "position": 2,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PublicVisibility": {
        "description": "The class defines the public visibility period on the Discovery/Publish API.",
        "type": "object"
      },
      "Relationship": {
        "description": "Relationship",
        "properties": {
          "id": {
            "description": "The ID of the related entity",
            "position": 2,
            "type": "string"
          },
          "references": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "References of this relationship in another system. Reference is the exact same entity",
            "example": "sourceName: id",
            "position": 3,
            "type": "object"
          },
          "source": {
            "description": "The source name of the related entity",
            "position": 1,
            "type": "string"
          },
          "type": {
            "description": "The type of the relationship",
            "enum": [
              "duplicate"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "SeatMap": {
        "description": "Seatmap",
        "properties": {
          "staticUrl": {
            "description": "Static Seatmap Url",
            "position": 3,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Segment": {
        "description": "Segment",
        "properties": {
          "id": {
            "description": "The ID of the classification's level",
            "type": "string"
          },
          "name": {
            "description": "The Name of the classification's level",
            "position": 1,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Social": {
        "description": "Social networks data",
        "properties": {
          "twitter": {
            "$ref": "#/components/schemas/Twitter",
            "description": "Twitter data"
          }
        },
        "type": "object"
      },
      "Source": {
        "description": "Source",
        "type": "object"
      },
      "StartDates": {
        "description": "Event's Start Dates",
        "properties": {
          "dateTBA": {
            "default": false,
            "description": "Boolean flag to indicate whether or not the start date is TBA",
            "position": 4,
            "type": "boolean"
          },
          "dateTBD": {
            "default": false,
            "description": "Boolean flag to indicate whether or not the start date is TBD",
            "position": 3,
            "type": "boolean"
          },
          "dateTime": {
            "description": "The event start datetime",
            "example": "yyyy-MM-ddThh:mm:ssZ",
            "format": "date-time",
            "position": 2,
            "type": "string"
          },
          "localDate": {
            "description": "The event start date in local date",
            "example": "yyyy-MM-dd",
            "format": "date",
            "type": "string"
          },
          "localTime": {
            "$ref": "#/components/schemas/LocalTime",
            "description": "The event end time in local time",
            "example": "yyyy-MM-dd",
            "position": 1
          },
          "noSpecificTime": {
            "default": false,
            "description": "Boolean flag to indicate whether or not the event start time has no specific time",
            "position": 6,
            "type": "boolean"
          },
          "timeTBA": {
            "default": false,
            "description": "Boolean flag to indicate whether or not the start time is TBA",
            "position": 5,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "State": {
        "description": "State",
        "properties": {
          "name": {
            "description": "Name of the entity",
            "position": 10,
            "type": "string"
          },
          "stateCode": {
            "description": "State code",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TatExtension": {
        "description": "The Attraction Tool (TAT) extension",
        "type": "object"
      },
      "TicketmasterAttractionExtensions": {
        "description": "Attraction's extension (ticketmaster source)",
        "type": "object"
      },
      "TicketmasterEventExtensions": {
        "description": "Event's extension (ticketmaster source)",
        "properties": {
          "displaySettings": {
            "$ref": "#/components/schemas/DisplaySettingExtension",
            "description": "Event's display setting informations"
          }
        },
        "type": "object"
      },
      "TicketmasterVenueExtensions": {
        "description": "Venue's extension (ticketmaster source)",
        "type": "object"
      },
      "Twitter": {
        "description": "Twitter data",
        "properties": {
          "handle": {
            "description": "Twitter handle",
            "enum": [
              "@a Twitter handle"
            ],
            "example": "@a Twitter handle exampe",
            "type": "string"
          },
          "hashtags": {
            "description": "Twitter hashtags",
            "example": "#hashtag example #hashtag another example",
            "items": {
              "type": "string"
            },
            "position": 1,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Venue": {
        "description": "Venue",
        "properties": {
          "accessibleSeatingDetail": {
            "description": "Venue accessible seating detail",
            "position": 35,
            "type": "string"
          },
          "additionalInfo": {
            "description": "Additional information of the entity",
            "position": 22,
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/Address",
            "description": "Address of the venue",
            "position": 20
          },
          "boxOfficeInfo": {
            "$ref": "#/components/schemas/VenueBoxOfficeInfo",
            "description": "Box office informations for the venue",
            "position": 31
          },
          "city": {
            "$ref": "#/components/schemas/City",
            "description": "City of the venue",
            "position": 21
          },
          "country": {
            "$ref": "#/components/schemas/Country",
            "description": "Country of the venue",
            "position": 23
          },
          "currency": {
            "description": "Default currency of ticket prices for events in this venue",
            "position": 27,
            "type": "string"
          },
          "description": {
            "description": "Description's of the entity",
            "position": 20,
            "type": "string"
          },
          "distance": {
            "format": "double",
            "type": "number"
          },
          "dma": {
            "description": "The list of associated DMAs (Designated Market Areas) of the venue",
            "items": {
              "$ref": "#/components/schemas/Dma"
            },
            "position": 29,
            "type": "array"
          },
          "externalLinks": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/ExternalLink"
              },
              "type": "array"
            },
            "description": "List of external links",
            "position": 79,
            "type": "object"
          },
          "generalInfo": {
            "$ref": "#/components/schemas/VenueGeneralInfo",
            "description": "General informations on the venue",
            "position": 36
          },
          "id": {
            "description": "Unique id of the entity in the discovery API",
            "position": 1,
            "type": "string"
          },
          "images": {
            "description": "Images of the entity",
            "items": {
              "$ref": "#/components/schemas/Image"
            },
            "position": 29,
            "type": "array",
            "uniqueItems": true
          },
          "locale": {
            "description": "Locale in which the content is returned",
            "position": 3,
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/Location",
            "description": "Location of the venue",
            "position": 25
          },
          "markets": {
            "description": "Markets of the venue",
            "items": {
              "$ref": "#/components/schemas/Market"
            },
            "position": 28,
            "type": "array"
          },
          "name": {
            "description": "Name of the entity",
            "position": 10,
            "type": "string"
          },
          "parkingDetail": {
            "description": "Venue parking info",
            "position": 33,
            "type": "string"
          },
          "postalCode": {
            "description": "Postal code / zipcode of the venue",
            "position": 24,
            "type": "string"
          },
          "social": {
            "$ref": "#/components/schemas/Social",
            "description": "Social networks data",
            "position": 30
          },
          "state": {
            "$ref": "#/components/schemas/State",
            "description": "State / Province of the venue",
            "position": 22
          },
          "test": {
            "default": false,
            "description": "Indicate if this is a test entity, by default test entities won't appear in discovery API",
            "position": 96,
            "type": "boolean"
          },
          "timezone": {
            "description": "Timezone of the venue",
            "position": 26,
            "type": "string"
          },
          "type": {
            "description": "Type of the entity",
            "enum": [
              "event",
              "venue",
              "attraction"
            ],
            "type": "string"
          },
          "units": {
            "type": "string"
          },
          "upcomingEvents": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "description": "number of upcoming events",
            "position": 110,
            "type": "object"
          },
          "url": {
            "description": "URL of a web site detail page of the entity",
            "position": 24,
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "VenueBoxOfficeInfo": {
        "description": "Venue box office information",
        "properties": {
          "acceptedPaymentDetail": {
            "description": "Venue box office accepted payment details",
            "position": 5,
            "type": "string"
          },
          "openHoursDetail": {
            "description": "Venue box office opening hours",
            "position": 3,
            "type": "string"
          },
          "phoneNumberDetail": {
            "description": "Venue box office phone number",
            "position": 1,
            "type": "string"
          },
          "willCallDetail": {
            "description": "Venue box office will call details",
            "position": 7,
            "type": "string"
          }
        },
        "type": "object"
      },
      "VenueExtensions": {
        "description": "All Venue's extensions",
        "properties": {
          "geolocation": {
            "$ref": "#/components/schemas/GeolocationVenueExtensions",
            "description": "Gelocolation extension on a venue | add filter 'extensions=geolocation' on your venues request",
            "position": 1
          }
        },
        "type": "object"
      },
      "VenueGeneralInfo": {
        "description": "Venue general information",
        "properties": {
          "childRule": {
            "description": "Venue children rule",
            "position": 3,
            "type": "string"
          },
          "generalRule": {
            "description": "Venue general rules",
            "position": 1,
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "tags": [
    {
      "name": "v2"
    }
  ]
}