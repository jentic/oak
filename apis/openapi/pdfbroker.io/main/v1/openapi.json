{
  "openapi": "3.0.1",
  "info": {
    "title": "PdfBroker.io API",
    "description": "PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.",
    "termsOfService": "https://www.pdfbroker.io/terms",
    "contact": {
      "name": "PdfBroker.io Support",
      "url": "https://www.pdfbroker.io/docs",
      "email": "support@pdfbroker.io"
    },
    "version": "v1",
    "x-jentic-source-url": "https://api.pdfbroker.io/swagger/v1/swagger.json"
  },
  "servers": [
    {
      "url": "https://api.pdfbroker.io"
    }
  ],
  "paths": {
    "/api/pdf": {
      "get": {
        "tags": [
          "Pdf"
        ],
        "summary": "Basic method to verify api is up and running",
        "responses": {
          "400": {
            "description": "If any error occurs parsing input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                },
                "example": "{\r\n  \"description\": \"Always empty in the public response, used for internal error transport to logs\",\r\n  \"statusCode\": 400,\r\n  \"errorMessage\": \"The error message provided to client\"\r\n}"
              }
            }
          },
          "415": {
            "description": "If content-type of request is not set to multipart/form-data or application/json"
          },
          "429": {
            "description": "If you reach the monthly request limit for your subscription plan"
          }
        }
      }
    },
    "/api/pdf/xslfo": {
      "post": {
        "tags": [
          "Pdf"
        ],
        "summary": "Create pdf-file from complete XSL-FO document.",
        "requestBody": {
          "description": "XSL-FO Request, the basic XSL-FO request. Post your XSL-FO document and digital resources, either as 'multipart/form-data' or 'application/json'",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FoRequestDto"
              },
              "example": "{\r\n  \"foDocumentBase64String\": \"<Encode your XSL-FO document as Base64 encoded string>\",\r\n  \"resources\": {\r\n    \"<Use file name as key, i.e 'logo.png', which is set as src on fo:external-graphic elements>\": \"<Convert your images to Base64 encoded string>\"\r\n  },\r\n  \"metadata\": {\r\n    \"title\": \"Pdf title metadata can be set with metadata object\",\r\n    \"author\": null,\r\n    \"subject\": null,\r\n    \"keywords\": [\r\n      \"pdf\",\r\n      \"api\"\r\n    ],\r\n    \"enableAdd\": true,\r\n    \"enableCopy\": true,\r\n    \"enableModify\": true,\r\n    \"enablePrinting\": true,\r\n    \"ownerPassword\": null,\r\n    \"userPassword\": null\r\n  }\r\n}"
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "fodocument": {
                    "type": "string",
                    "description": "An entry named fodocument is required in the multipart/form-data request",
                    "format": "binary"
                  },
                  "resources": {
                    "type": "string",
                    "description": "After fodocument is added, add all digital resources one by one to your multipart/form-data request, using the filename as name in the form.",
                    "format": "binary"
                  },
                  "metadata": {
                    "type": "string",
                    "description": "Add pdf document metadata like title, author, subject and keywords",
                    "format": "string",
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "fodocument": {
                  "contentType": "application/octet-stream"
                },
                "resources": {
                  "contentType": "application/octet-stream"
                },
                "metadata": {
                  "contentType": "application/json"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PdfResponseDto"
                },
                "example": "{\r\n  \"pdfFileBase64String\": \"Base64 encoded pdf file content\",\r\n  \"errorMessage\": \"If any error occured, info will be provided here\"\r\n}"
              },
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "If any error occurs parsing input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                },
                "example": "{\r\n  \"description\": \"Always empty in the public response, used for internal error transport to logs\",\r\n  \"statusCode\": 400,\r\n  \"errorMessage\": \"The error message provided to client\"\r\n}"
              }
            }
          },
          "415": {
            "description": "If content-type of request is not set to multipart/form-data or application/json"
          },
          "429": {
            "description": "If you reach the monthly request limit for your subscription plan"
          }
        }
      }
    },
    "/api/pdf/xslfowithtransform": {
      "post": {
        "tags": [
          "Pdf"
        ],
        "summary": "Create pdf-file from transforming xml document with Xsl-Fo transform document.",
        "requestBody": {
          "description": "XSL-FO Transform Request. The XSL-FO is transformed on the supplied xml data document. Post your XSL-FO transform document and xml data document aloing with your digital resources, either as 'multipart/form-data' or 'application/json'",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FoTransformRequestDto"
              },
              "example": "{\r\n  \"xmlDataDocumentBase64String\": \"<This is the document which contains your data that the XSL-FO transform will be applied on. Send as Base64 encoded string>\",\r\n  \"foDocumentBase64String\": \"<Encode your XSL-FO transform document as Base64 encoded string>\",\r\n  \"resources\": {\r\n    \"<Use file name as key, i.e 'logo.png', which is set as src on fo:external-graphic elements>\": \"<Convert your images to Base64 encoded string>\"\r\n  },\r\n  \"metadata\": null\r\n}"
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "fodocument": {
                    "type": "string",
                    "description": "An entry named fodocument with your XSL-FO transform is required in the multipart/form-data request",
                    "format": "binary"
                  },
                  "xmldatadocument": {
                    "type": "string",
                    "description": "An entry named xmldatadocument, on which the XSL-FO transform is applied, is required in the multipart/form-data request",
                    "format": "binary"
                  },
                  "resources": {
                    "type": "string",
                    "description": "After fodocument and xmldatadocument is added, add all digital resources one by one to your multipart/form-data request, using the filename as name in the form.",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "fodocument": {
                  "contentType": "application/octet-stream"
                },
                "xmldatadocument": {
                  "contentType": "application/octet-stream"
                },
                "resources": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PdfResponseDto"
                },
                "example": "{\r\n  \"pdfFileBase64String\": \"Base64 encoded pdf file content\",\r\n  \"errorMessage\": \"If any error occured, info will be provided here\"\r\n}"
              },
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "If any error occurs parsing input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                },
                "example": "{\r\n  \"description\": \"Always empty in the public response, used for internal error transport to logs\",\r\n  \"statusCode\": 400,\r\n  \"errorMessage\": \"The error message provided to client\"\r\n}"
              }
            }
          },
          "415": {
            "description": "If content-type of request is not set to multipart/form-data or application/json"
          },
          "429": {
            "description": "If you reach the monthly request limit for your subscription plan"
          }
        }
      }
    },
    "/api/pdf/pdftoimage": {
      "post": {
        "tags": [
          "Pdf"
        ],
        "summary": "Generate an image of to provided pdf file",
        "requestBody": {
          "description": "PdfToImage Request. Create an image of a page in an existing pdf document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PdfToImageRequestDto"
              },
              "example": "{\r\n  \"pdfFileBase64String\": \"<Encode your existing PDF document as Base64 encoded string>\",\r\n  \"options\": {\r\n    \"pageNumber\": 1,\r\n    \"imageFormat\": \"image/jpeg\",\r\n    \"horizontalResolution\": 96.0,\r\n    \"verticalResolution\": 96.0,\r\n    \"width\": 0,\r\n    \"height\": 0,\r\n    \"transparent\": false,\r\n    \"jpegQuality\": 90,\r\n    \"pngCompressionLevel\": 6\r\n  }\r\n}"
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "pdfdocument": {
                    "type": "string",
                    "description": "An entry named pdfdocument is required in the multipart/form-data request",
                    "format": "binary"
                  },
                  "options": {
                    "type": "string",
                    "description": "After pdfdocument is added, add an entry named options with your PdfToImageOptions object serialized as JSON.",
                    "format": "string"
                  }
                }
              },
              "encoding": {
                "pdfdocument": {
                  "contentType": "application/octet-stream"
                },
                "options": {
                  "contentType": "application/json"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Generate an image of the provided pdf file. Either the image file directly or serialized as Json if Accept-header is set to application/json",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageResponseDto"
                },
                "example": "{\r\n  \"imageBase64String\": \"Image file base64 encoded. This is a complete data uri, including media type that can be used directly as src on a img-tag e.g.\",\r\n  \"errorMessage\": \"If any error occurred, information will be provided here\"\r\n}"
              },
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "image/gif": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "If any error occurs parsing input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                },
                "example": "{\r\n  \"description\": \"Always empty in the public response, used for internal error transport to logs\",\r\n  \"statusCode\": 400,\r\n  \"errorMessage\": \"The error message provided to client\"\r\n}"
              }
            }
          },
          "415": {
            "description": "If content-type of request is not set to multipart/form-data or application/json"
          },
          "429": {
            "description": "If you reach the monthly request limit for your subscription plan"
          }
        }
      }
    },
    "/api/pdf/pdfconcat": {
      "post": {
        "tags": [
          "Pdf"
        ],
        "summary": "Concatenate multiple pdf files into single pdf file..",
        "requestBody": {
          "description": "PdfConcat Request. Add two or more pdf files and concatenate pages into single pdf document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PdfConcatenationRequestDto"
              },
              "example": "{\r\n  \"pdfDocumentsAsBase64String\": [\r\n    \"<Encode your pdf documents as Base64 encoded string>\",\r\n    \"<Encode your pdf documents as Base64 encoded string>\"\r\n  ]\r\n}"
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "pdfdocument1": {
                    "type": "string",
                    "description": "Add pdf files to be concatenated into single file",
                    "format": "binary"
                  },
                  "pdfdocument2": {
                    "type": "string",
                    "description": "You can add more than two files in the same request",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "pdfdocument1": {
                  "contentType": "application/octet-stream"
                },
                "pdfdocument2": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PdfResponseDto"
                },
                "example": "{\r\n  \"pdfFileBase64String\": \"Base64 encoded pdf file content\",\r\n  \"errorMessage\": \"If any error occured, info will be provided here\"\r\n}"
              },
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "If any error occurs parsing input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                },
                "example": "{\r\n  \"description\": \"Always empty in the public response, used for internal error transport to logs\",\r\n  \"statusCode\": 400,\r\n  \"errorMessage\": \"The error message provided to client\"\r\n}"
              }
            }
          },
          "415": {
            "description": "If content-type of request is not set to multipart/form-data or application/json"
          },
          "429": {
            "description": "If you reach the monthly request limit for your subscription plan"
          }
        }
      }
    },
    "/api/pdf/pdfwritestring": {
      "post": {
        "tags": [
          "Pdf"
        ],
        "summary": "Write text on a page in a pdf document.",
        "requestBody": {
          "description": "PdfWriteString Request. Write string on page in pdf document",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PdfWriteStringRequestDto"
              },
              "example": "{\r\n  \"pdfFileBase64String\": \"<Encode your existing PDF document as Base64 encoded string>\",\r\n  \"options\": {\r\n    \"text\": \"This is test string\",\r\n    \"textColor\": {\r\n      \"r\": 33,\r\n      \"g\": 34,\r\n      \"b\": 35\r\n    },\r\n    \"font\": {\r\n      \"name\": \"Arial\",\r\n      \"size\": 24.0,\r\n      \"style\": 1\r\n    },\r\n    \"pageNumber\": 3,\r\n    \"xPosition\": 40.0,\r\n    \"yPosition\": -200.0,\r\n    \"xOrigin\": 1,\r\n    \"yOrigin\": 2\r\n  },\r\n  \"fontFileBase64String\": \"<Attach your own TrueTypeFont file if necessary to style text, encoded as Base64 encoded string>\"\r\n}"
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "pdfdocument": {
                    "type": "string",
                    "description": "An entry named pdfdocument is required in the multipart/form-data request",
                    "format": "binary"
                  },
                  "options": {
                    "type": "string",
                    "description": "After pdfdocument is added, add an entry named options with your PdfWriteStringOptions object serialized as JSON.",
                    "format": "string"
                  },
                  "fontfile": {
                    "type": "string",
                    "description": "Optional entry to attach your own TrueType font file to style string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "pdfdocument": {
                  "contentType": "application/octet-stream"
                },
                "options": {
                  "contentType": "application/json"
                },
                "fontfile": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PdfResponseDto"
                },
                "example": "{\r\n  \"pdfFileBase64String\": \"Base64 encoded pdf file content\",\r\n  \"errorMessage\": \"If any error occured, info will be provided here\"\r\n}"
              },
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "If any error occurs parsing input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                },
                "example": "{\r\n  \"description\": \"Always empty in the public response, used for internal error transport to logs\",\r\n  \"statusCode\": 400,\r\n  \"errorMessage\": \"The error message provided to client\"\r\n}"
              }
            }
          },
          "415": {
            "description": "If content-type of request is not set to multipart/form-data or application/json"
          },
          "429": {
            "description": "If you reach the monthly request limit for your subscription plan"
          }
        }
      }
    },
    "/api/pdf/weasyprint": {
      "post": {
        "tags": [
          "Pdf"
        ],
        "summary": "Generate pdf file from html/url using Weasyprint. Requires paid subscription. This is our premium pdf generator. It is the most accurate and feature rich pdf generator we have with support for pdf/a-1b, pdf/a-2b, pdf/a-3b, pdf/a-4b and pdf/ua-1.",
        "requestBody": {
          "description": "Weasyprint Request. Generate pdf from html, either from url or base64 encoded html string",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WeasyPrintToPdfRequestDto"
              },
              "example": "{\r\n  \"weasyPrintToPdfArguments\": {\r\n    \"pdf-variant\": \"pdf/ua-1\"\r\n  },\r\n  \"url\": \"https://www.pdfbroker.io\",\r\n  \"htmlBase64String\": null,\r\n  \"resources\": null\r\n}"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PdfResponseDto"
                },
                "example": "{\r\n  \"pdfFileBase64String\": \"Base64 encoded pdf file content\",\r\n  \"errorMessage\": \"If any error occured, info will be provided here\"\r\n}"
              },
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "If any error occurs executing request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                },
                "example": "{\r\n  \"description\": \"Always empty in the public response, used for internal error transport to logs\",\r\n  \"statusCode\": 400,\r\n  \"errorMessage\": \"The error message provided to client\"\r\n}"
              }
            }
          },
          "415": {
            "description": "If content-type of request is not set to application/json"
          },
          "429": {
            "description": "If you reach the monthly request limit for your subscription plan"
          }
        }
      }
    },
    "/api/pdf/wkhtmltopdf": {
      "post": {
        "tags": [
          "Pdf"
        ],
        "summary": "Generate pdf file from url using the excellent tool wkhtmltopdf.",
        "requestBody": {
          "description": "WkHtmlToPdf Request. Generate pdf from html, either from url or base64 encoded html string",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WkHtmlToPdfRequestDto"
              },
              "example": "{\r\n  \"wkHtmlToPdfArguments\": {\r\n    \"grayscale\": \"\",\r\n    \"viewport-size\": \"1280x1024\"\r\n  },\r\n  \"url\": \"https://www.pdfbroker.io\",\r\n  \"htmlBase64String\": null,\r\n  \"resources\": null\r\n}"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PdfResponseDto"
                },
                "example": "{\r\n  \"pdfFileBase64String\": \"Base64 encoded pdf file content\",\r\n  \"errorMessage\": \"If any error occured, info will be provided here\"\r\n}"
              },
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "If any error occurs executing request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                },
                "example": "{\r\n  \"description\": \"Always empty in the public response, used for internal error transport to logs\",\r\n  \"statusCode\": 400,\r\n  \"errorMessage\": \"The error message provided to client\"\r\n}"
              }
            }
          },
          "415": {
            "description": "If content-type of request is not set to application/json"
          },
          "429": {
            "description": "If you reach the monthly request limit for your subscription plan"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ColorDto": {
        "type": "object",
        "properties": {
          "r": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "description": "Get or sets R value of RGB color",
            "format": "int32"
          },
          "g": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "description": "Get or sets G value of RGB color",
            "format": "int32"
          },
          "b": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "description": "Get or sets B value of RGB color",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Set color"
      },
      "ErrorResponseDto": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string",
            "description": "If any error occurs the message will be displayed in here",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FoRequestDto": {
        "type": "object",
        "properties": {
          "foDocumentBase64String": {
            "type": "string",
            "description": "This is the complete XSL-FO document provided using Base64 encoding.",
            "nullable": true
          },
          "resources": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "This is a set of key-value pairs of digital resources like images that is referenced in the XSL-FO document. It uses the filename as key and the data is provided as a Base64 encoded string.",
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/PdfMetadataDto"
          }
        },
        "additionalProperties": false,
        "description": "The basic request with the XSL-FO document as a Base64 encoded string with a set of resources provided with a name and the data of the resource as a Base64 encoded string."
      },
      "FoTransformRequestDto": {
        "type": "object",
        "properties": {
          "foDocumentBase64String": {
            "type": "string",
            "description": "This is the complete XSL-FO document provided using Base64 encoding.",
            "nullable": true
          },
          "resources": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "This is a set of key-value pairs of digital resources like images that is referenced in the XSL-FO document. It uses the filename as key and the data is provided as a Base64 encoded string.",
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/PdfMetadataDto"
          },
          "xmlDataDocumentBase64String": {
            "type": "string",
            "description": "This is xml data document on which the XSL-FO transform document is applied. Provided using Base64 encoding.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The XSL-FO transform document and xml data document as a Base64 encoded string with a set of resources provided with a name and the data of the resource as a Base64 encoded string."
      },
      "FontDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets the name of the font",
            "nullable": true
          },
          "size": {
            "type": "number",
            "description": "Gets the size of the font",
            "format": "float"
          },
          "style": {
            "$ref": "#/components/schemas/FontStyle"
          }
        },
        "additionalProperties": false,
        "description": "The Font dto object"
      },
      "FontStyle": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Font style enum representing Regular, Bold, Italic, BoldItalic",
        "format": "int32"
      },
      "ImageResponseDto": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string",
            "description": "If any error occurs the message will be displayed in here",
            "nullable": true
          },
          "imageBase64String": {
            "type": "string",
            "description": "The Base64 encoded string that is the image file. This is a complete data uri, including media type that can be used directly as src on a img-tag e.g.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "When setting the Accept-header in the request to \"application/json\" the image file will be return as Base64 encoded string. Note that converting data to Base64 encoded strings increases the response size with approximately 33%, if you can accept the a binary format it's better to use Accept-header \"image/jpeg\", \"image/png\" or \"image/gif\"."
      },
      "PdfConcatenationRequestDto": {
        "type": "object",
        "properties": {
          "pdfDocumentsAsBase64String": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of Pdf documents encoded as Base64 strings.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request to concatenate a list of Pdf documents to a single Pdf document."
      },
      "PdfMetadataDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Pdf document title",
            "nullable": true
          },
          "author": {
            "type": "string",
            "description": "Pdf document author",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "description": "Pdf document subject",
            "nullable": true
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Pdf document keywords",
            "nullable": true
          },
          "enableAdd": {
            "type": "boolean",
            "description": "Enables or disables adding or modifying text annotations and interactive\r\nform fields."
          },
          "enableCopy": {
            "type": "boolean",
            "description": "Enables or disables copying of text and graphics."
          },
          "enableModify": {
            "type": "boolean",
            "description": "Enables or disables modifying document contents (other than text annotations and \r\ninteractive form fields)."
          },
          "enablePrinting": {
            "type": "boolean",
            "description": "Enables or disables printing."
          },
          "ownerPassword": {
            "type": "string",
            "description": "Specifies the owner password that will protect full access to any generated PDF documents.",
            "nullable": true
          },
          "userPassword": {
            "type": "string",
            "description": "Specifies the user password that will protect access to any generated PDF documents.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Enter meta data for pdf document"
      },
      "PdfResponseDto": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string",
            "description": "If any error occurs the message will be displayed in here",
            "nullable": true
          },
          "pdfFileBase64String": {
            "type": "string",
            "description": "The Base64 encoded string that is the pdf file.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "When setting the Accept-header in the request to \"application/json\" the content of the pdf file will be return as Base64 encoded string. Note that converting data to Base64 encoded strings increases the response size with approximately 33%, if you can accept the a binary format it's better to use Accept-header \"application/pdf\"."
      },
      "PdfToImageOptions": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "description": "Which page of the pdf file to generate image from, default is first page",
            "format": "int32"
          },
          "imageFormat": {
            "type": "string",
            "description": "Valid options are \"image/jpeg\", \"image/png\" or \"image/gif\". Default is \"image/png\"",
            "nullable": true
          },
          "horizontalResolution": {
            "type": "number",
            "description": "Set the horizontal resolution, default is 96 dpi;",
            "format": "double"
          },
          "verticalResolution": {
            "type": "number",
            "description": "Set the vertical resolution, default is 96 dpi;",
            "format": "double"
          },
          "width": {
            "type": "integer",
            "description": "Set the width of the output image, default value is width of source document. To scale width, and keeping proportions, do not set height;",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "description": "Set the height of the output image, default value is width of source document. To scale height, and keeping proportions, do not set width;",
            "format": "int32"
          },
          "transparent": {
            "type": "boolean",
            "description": "Keep the background of the image transparent. This setting is not available in JPEG-files, since transparency is not supported in the JPEG format."
          },
          "jpegQuality": {
            "type": "integer",
            "description": "Sets the quality of jpeg images, range 0 to 100, default is 75",
            "format": "int32"
          },
          "pngCompressionLevel": {
            "type": "integer",
            "description": "Sets the png compression level, range 1 - 9, default is 6",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PdfToImageRequestDto": {
        "type": "object",
        "properties": {
          "pdfFileBase64String": {
            "type": "string",
            "description": "The pdf file to generate image from, as Base64 encoded string.",
            "nullable": true
          },
          "options": {
            "$ref": "#/components/schemas/PdfToImageOptions"
          }
        },
        "additionalProperties": false
      },
      "PdfWriteStringOptions": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The text to write in the pdf",
            "nullable": true
          },
          "textColor": {
            "$ref": "#/components/schemas/ColorDto"
          },
          "font": {
            "$ref": "#/components/schemas/FontDto"
          },
          "pageNumber": {
            "type": "integer",
            "description": "Get or set which page in the pdf to write on, default is first page.",
            "format": "int32"
          },
          "xPosition": {
            "type": "number",
            "description": "Get or set the X axis position on where to write string, in reference to XOrigin.",
            "format": "float"
          },
          "yPosition": {
            "type": "number",
            "description": "Get or set the Y axis position on where to write string, in reference to YOrigin.",
            "format": "float"
          },
          "xOrigin": {
            "$ref": "#/components/schemas/XOriginPoint"
          },
          "yOrigin": {
            "$ref": "#/components/schemas/YOriginPoint"
          }
        },
        "additionalProperties": false,
        "description": "Options for writing string in pdf page;"
      },
      "PdfWriteStringRequestDto": {
        "type": "object",
        "properties": {
          "pdfFileBase64String": {
            "type": "string",
            "description": "The pdf file to add text to, as Base64 encoded string.",
            "nullable": true
          },
          "options": {
            "$ref": "#/components/schemas/PdfWriteStringOptions"
          },
          "fontFileBase64String": {
            "type": "string",
            "description": "System fonts are available, but you can provide your own font file to be embedded in the pdf document. Send font as Base64 encoded string.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The request dto object to write a string on pdf page"
      },
      "WeasyPrintToPdfRequestDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The url to generate pdf from. Url has precedence over HtmlBase64String value if both are set.",
            "nullable": true
          },
          "htmlBase64String": {
            "type": "string",
            "description": "Base64 encoded string with html. If property Url is set, it will be used, not HtmlBase64String.",
            "nullable": true
          },
          "resources": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "This is a set of key-value pairs of digital resources like images that is referenced in the HtmlBase64String document. It uses the filename including relative path as key and the data is provided as a Base64 encoded string.",
            "nullable": true
          },
          "weasyPrintToPdfArguments": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Command line arguments passed to Weasyprint. Invalid arguments will be ignored. Invalid arguments are \"v\", \"verbose\", \"version\", \"d\", \"debug\", \"q\", \"quiet\", \"h\", \"help\", \"u\", \"f\", \"format\".",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "WeasyPrintToPdfRequestDto is the data transfer object for generating a pdf using Weasyprint."
      },
      "WkHtmlToPdfRequestDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The url to generate pdf from. Url has precedence over HtmlBase64String value if both are set.",
            "nullable": true
          },
          "htmlBase64String": {
            "type": "string",
            "description": "Base64 encoded string with html. If property Url is set, it will be used, not HtmlBase64String.",
            "nullable": true
          },
          "resources": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "This is a set of key-value pairs of digital resources like images that is referenced in the HtmlBase64String document. It uses the filename including relative path as key and the data is provided as a Base64 encoded string.",
            "nullable": true
          },
          "wkHtmlToPdfArguments": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Command line arguments passed to wkhtmltopdf. Invalid arguments will be ignored. Invalid arguments are \"manpage\", \"help\", \"H\", \"h\", \"extended-help\", \"htmldoc\", \"readme\", \"license\", \"read-args-from-stdin\", \"readme\", \"version\", \"V\", \"debug-javascript\", \"no-debug-javascript\", \"enable-local-file-access\", \"disable-local-file-access\", \"allow\".",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "WkHtmlToPdfRequestDto is the data transfer object for generating a pdf using wkhtmltopdf;"
      },
      "XOriginPoint": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "YOriginPoint": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://login.pdfbroker.io/connect/token",
            "scopes": {
              "pdfbroker": "Scope to access the PdfBroker API."
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "OAuth2": [
        "pdfbroker"
      ]
    }
  ]
}